/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ABDSStaking {
  export type StakeStruct = {
    amount: BigNumberish;
    startTime: BigNumberish;
    duration: BigNumberish;
    apr: BigNumberish;
  };

  export type StakeStructOutput = [
    amount: bigint,
    startTime: bigint,
    duration: bigint,
    apr: bigint
  ] & { amount: bigint; startTime: bigint; duration: bigint; apr: bigint };
}

export interface ABDSStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Claim"
      | "abdsToken"
      | "boost"
      | "getUserStake"
      | "lastRewardTime"
      | "stakeTokens"
      | "uniswapOracle"
      | "usdcToken"
      | "usdtToken"
      | "userStakes"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RewardsWithdrawn"
      | "StakeDurationExtended"
      | "Staked"
      | "UnlockedStakesWithdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "Claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "abdsToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "abdsToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace RewardsWithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    reward: BigNumberish,
    tokenType: BigNumberish
  ];
  export type OutputTuple = [user: string, reward: bigint, tokenType: bigint];
  export interface OutputObject {
    user: string;
    reward: bigint;
    tokenType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeDurationExtendedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, duration: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    duration: BigNumberish,
    apr: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    duration: bigint,
    apr: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    duration: bigint;
    apr: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockedStakesWithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    stakeAmount: BigNumberish,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    stakeAmount: bigint,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    stakeAmount: bigint;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ABDSStaking extends BaseContract {
  connect(runner?: ContractRunner | null): ABDSStaking;
  waitForDeployment(): Promise<this>;

  interface: ABDSStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Claim: TypedContractMethod<[tokenType: BigNumberish], [void], "nonpayable">;

  abdsToken: TypedContractMethod<[], [string], "view">;

  boost: TypedContractMethod<
    [index: BigNumberish, additionaldays: BigNumberish],
    [void],
    "nonpayable"
  >;

  getUserStake: TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [ABDSStaking.StakeStructOutput],
    "view"
  >;

  lastRewardTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  stakeTokens: TypedContractMethod<
    [_amount: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  uniswapOracle: TypedContractMethod<[], [string], "view">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  usdtToken: TypedContractMethod<[], [string], "view">;

  userStakes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        startTime: bigint;
        duration: bigint;
        apr: bigint;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Claim"
  ): TypedContractMethod<[tokenType: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "abdsToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "boost"
  ): TypedContractMethod<
    [index: BigNumberish, additionaldays: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getUserStake"
  ): TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [ABDSStaking.StakeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastRewardTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeTokens"
  ): TypedContractMethod<
    [_amount: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniswapOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usdtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userStakes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        startTime: bigint;
        duration: bigint;
        apr: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "RewardsWithdrawn"
  ): TypedContractEvent<
    RewardsWithdrawnEvent.InputTuple,
    RewardsWithdrawnEvent.OutputTuple,
    RewardsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "StakeDurationExtended"
  ): TypedContractEvent<
    StakeDurationExtendedEvent.InputTuple,
    StakeDurationExtendedEvent.OutputTuple,
    StakeDurationExtendedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "UnlockedStakesWithdrawn"
  ): TypedContractEvent<
    UnlockedStakesWithdrawnEvent.InputTuple,
    UnlockedStakesWithdrawnEvent.OutputTuple,
    UnlockedStakesWithdrawnEvent.OutputObject
  >;

  filters: {
    "RewardsWithdrawn(address,uint256,uint8)": TypedContractEvent<
      RewardsWithdrawnEvent.InputTuple,
      RewardsWithdrawnEvent.OutputTuple,
      RewardsWithdrawnEvent.OutputObject
    >;
    RewardsWithdrawn: TypedContractEvent<
      RewardsWithdrawnEvent.InputTuple,
      RewardsWithdrawnEvent.OutputTuple,
      RewardsWithdrawnEvent.OutputObject
    >;

    "StakeDurationExtended(address,uint256,uint256)": TypedContractEvent<
      StakeDurationExtendedEvent.InputTuple,
      StakeDurationExtendedEvent.OutputTuple,
      StakeDurationExtendedEvent.OutputObject
    >;
    StakeDurationExtended: TypedContractEvent<
      StakeDurationExtendedEvent.InputTuple,
      StakeDurationExtendedEvent.OutputTuple,
      StakeDurationExtendedEvent.OutputObject
    >;

    "Staked(address,uint256,uint256,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "UnlockedStakesWithdrawn(address,uint256,uint256)": TypedContractEvent<
      UnlockedStakesWithdrawnEvent.InputTuple,
      UnlockedStakesWithdrawnEvent.OutputTuple,
      UnlockedStakesWithdrawnEvent.OutputObject
    >;
    UnlockedStakesWithdrawn: TypedContractEvent<
      UnlockedStakesWithdrawnEvent.InputTuple,
      UnlockedStakesWithdrawnEvent.OutputTuple,
      UnlockedStakesWithdrawnEvent.OutputObject
    >;
  };
}
