/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SimpleToken,
  SimpleTokenInterface,
} from "../../contracts/SimpleToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405269d3c21bcecceda100000060055534801561001e57600080fd5b506040518060400160405280600e81526020017f53696d706c65545354546f6b656e0000000000000000000000000000000000008152506040518060400160405280600381526020017f53544b0000000000000000000000000000000000000000000000000000000000815250816003908161009a9190610480565b5080600490816100aa9190610480565b5050506100bf336005546100c460201b60201c565b61065c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012a906105af565b60405180910390fd5b6101456000838361022660201b60201c565b806002600082825461015791906105fe565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516102089190610641565b60405180910390a36102226000838361022b60201b60201c565b5050565b505050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102b157607f821691505b6020821081036102c4576102c361026a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261032c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102ef565b61033686836102ef565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061037d6103786103738461034e565b610358565b61034e565b9050919050565b6000819050919050565b61039783610362565b6103ab6103a382610384565b8484546102fc565b825550505050565b600090565b6103c06103b3565b6103cb81848461038e565b505050565b5b818110156103ef576103e46000826103b8565b6001810190506103d1565b5050565b601f82111561043457610405816102ca565b61040e846102df565b8101602085101561041d578190505b610431610429856102df565b8301826103d0565b50505b505050565b600082821c905092915050565b600061045760001984600802610439565b1980831691505092915050565b60006104708383610446565b9150826002028217905092915050565b61048982610230565b67ffffffffffffffff8111156104a2576104a161023b565b5b6104ac8254610299565b6104b78282856103f3565b600060209050601f8311600181146104ea57600084156104d8578287015190505b6104e28582610464565b86555061054a565b601f1984166104f8866102ca565b60005b82811015610520578489015182556001820191506020850194506020810190506104fb565b8683101561053d5784890151610539601f891682610446565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000610599601f83610552565b91506105a482610563565b602082019050919050565b600060208201905081810360008301526105c88161058c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106098261034e565b91506106148361034e565b925082820190508082111561062c5761062b6105cf565b5b92915050565b61063b8161034e565b82525050565b60006020820190506106566000830184610632565b92915050565b6114658061066b6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b4114610228578063a457c2d714610246578063a9059cbb14610276578063dd62ed3e146102a6576100cf565b806339509351146101ac57806340c10f19146101dc57806370a08231146101f8576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063378dc3dc1461018e575b600080fd5b6100dc6102d6565b6040516100e99190610cd6565b60405180910390f35b61010c60048036038101906101079190610d91565b610368565b6040516101199190610dec565b60405180910390f35b61012a61038b565b6040516101379190610e16565b60405180910390f35b61015a60048036038101906101559190610e31565b610395565b6040516101679190610dec565b60405180910390f35b6101786103c4565b6040516101859190610ea0565b60405180910390f35b6101966103cd565b6040516101a39190610e16565b60405180910390f35b6101c660048036038101906101c19190610d91565b6103d3565b6040516101d39190610dec565b60405180910390f35b6101f660048036038101906101f19190610d91565b61040a565b005b610212600480360381019061020d9190610ebb565b610418565b60405161021f9190610e16565b60405180910390f35b610230610460565b60405161023d9190610cd6565b60405180910390f35b610260600480360381019061025b9190610d91565b6104f2565b60405161026d9190610dec565b60405180910390f35b610290600480360381019061028b9190610d91565b610569565b60405161029d9190610dec565b60405180910390f35b6102c060048036038101906102bb9190610ee8565b61058c565b6040516102cd9190610e16565b60405180910390f35b6060600380546102e590610f57565b80601f016020809104026020016040519081016040528092919081815260200182805461031190610f57565b801561035e5780601f106103335761010080835404028352916020019161035e565b820191906000526020600020905b81548152906001019060200180831161034157829003601f168201915b5050505050905090565b600080610373610613565b905061038081858561061b565b600191505092915050565b6000600254905090565b6000806103a0610613565b90506103ad8582856107e4565b6103b8858585610870565b60019150509392505050565b60006012905090565b60055481565b6000806103de610613565b90506103ff8185856103f0858961058c565b6103fa9190610fb7565b61061b565b600191505092915050565b6104148282610ae6565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461046f90610f57565b80601f016020809104026020016040519081016040528092919081815260200182805461049b90610f57565b80156104e85780601f106104bd576101008083540402835291602001916104e8565b820191906000526020600020905b8154815290600101906020018083116104cb57829003601f168201915b5050505050905090565b6000806104fd610613565b9050600061050b828661058c565b905083811015610550576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105479061105d565b60405180910390fd5b61055d828686840361061b565b60019250505092915050565b600080610574610613565b9050610581818585610870565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361068a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610681906110ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f090611181565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107d79190610e16565b60405180910390a3505050565b60006107f0848461058c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461086a578181101561085c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610853906111ed565b60405180910390fd5b610869848484840361061b565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d69061127f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361094e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094590611311565b60405180910390fd5b610959838383610c3c565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d6906113a3565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610acd9190610e16565b60405180910390a3610ae0848484610c41565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4c9061140f565b60405180910390fd5b610b6160008383610c3c565b8060026000828254610b739190610fb7565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c249190610e16565b60405180910390a3610c3860008383610c41565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c80578082015181840152602081019050610c65565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ca882610c46565b610cb28185610c51565b9350610cc2818560208601610c62565b610ccb81610c8c565b840191505092915050565b60006020820190508181036000830152610cf08184610c9d565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d2882610cfd565b9050919050565b610d3881610d1d565b8114610d4357600080fd5b50565b600081359050610d5581610d2f565b92915050565b6000819050919050565b610d6e81610d5b565b8114610d7957600080fd5b50565b600081359050610d8b81610d65565b92915050565b60008060408385031215610da857610da7610cf8565b5b6000610db685828601610d46565b9250506020610dc785828601610d7c565b9150509250929050565b60008115159050919050565b610de681610dd1565b82525050565b6000602082019050610e016000830184610ddd565b92915050565b610e1081610d5b565b82525050565b6000602082019050610e2b6000830184610e07565b92915050565b600080600060608486031215610e4a57610e49610cf8565b5b6000610e5886828701610d46565b9350506020610e6986828701610d46565b9250506040610e7a86828701610d7c565b9150509250925092565b600060ff82169050919050565b610e9a81610e84565b82525050565b6000602082019050610eb56000830184610e91565b92915050565b600060208284031215610ed157610ed0610cf8565b5b6000610edf84828501610d46565b91505092915050565b60008060408385031215610eff57610efe610cf8565b5b6000610f0d85828601610d46565b9250506020610f1e85828601610d46565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f6f57607f821691505b602082108103610f8257610f81610f28565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fc282610d5b565b9150610fcd83610d5b565b9250828201905080821115610fe557610fe4610f88565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611047602583610c51565b915061105282610feb565b604082019050919050565b600060208201905081810360008301526110768161103a565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006110d9602483610c51565b91506110e48261107d565b604082019050919050565b60006020820190508181036000830152611108816110cc565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061116b602283610c51565b91506111768261110f565b604082019050919050565b6000602082019050818103600083015261119a8161115e565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006111d7601d83610c51565b91506111e2826111a1565b602082019050919050565b60006020820190508181036000830152611206816111ca565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611269602583610c51565b91506112748261120d565b604082019050919050565b600060208201905081810360008301526112988161125c565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006112fb602383610c51565b91506113068261129f565b604082019050919050565b6000602082019050818103600083015261132a816112ee565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061138d602683610c51565b915061139882611331565b604082019050919050565b600060208201905081810360008301526113bc81611380565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006113f9601f83610c51565b9150611404826113c3565b602082019050919050565b60006020820190508181036000830152611428816113ec565b905091905056fea264697066735822122099697db1b5796bf736a014b130c5e77029dcaa9e6dc4ae60ce3a6cc1f6d4168364736f6c634300081b0033";

type SimpleTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleToken__factory extends ContractFactory {
  constructor(...args: SimpleTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SimpleToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleToken__factory {
    return super.connect(runner) as SimpleToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleTokenInterface {
    return new Interface(_abi) as SimpleTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SimpleToken {
    return new Contract(address, _abi, runner) as unknown as SimpleToken;
  }
}
